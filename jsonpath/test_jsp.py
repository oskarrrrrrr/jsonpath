import pytest

from . import jsp


@pytest.mark.parametrize(
    "d, p, e",
    (
        ({"a": "b"}, "$", [{"a": "b"}]),
        ({"a": "b"}, "$.a", ["b"]),
        ({"a": "b"}, "$['a']", ["b"]),
        ({"a": "b"}, '$["a"]', ["b"]),
        ([1, 2, 3], "$.*", [1, 2, 3]),
        ({"a": 1, "b": 2, "c": 3}, "$.*", [1, 2, 3]),
        ([1, 2, 3], "$.0", [1]),
        ([1, 2, 3], "$.-1", [3]),
        ([1, 2, 3], "$[-1]", [3]),
        ([1, 2, 3], "$.4", []),
        (list(range(1000)), "$.999", [999]),
        ([1, 2, 3], "$.1:2", [2]),
        ([1, 2, 3], "$.0:2", [1, 2]),
        ([1, 2, 3], "$.::", [1, 2, 3]),
        ([1, 2, 3], "$.::-1", [3, 2, 1]),
        ([1, 2, 3], "$[*]", [1, 2, 3]),
        ([{"a": 1}, {"a": 2}, {"a": 3}], "$.*.a", [1, 2, 3]),
        ([{"a": 1}, {"a": 2}, {"a": 3}], "$..a", [1, 2, 3]),
        ({"a": {"b": {"c": "d"}}}, "$.a.b.c", ["d"]),
        ({"a": "b"}, "$.b", []),
        (
            [{"a": 1}, {"b": {"a": 2}}, [{"c": {"d": {"a": 4}}, "a": 3}]],
            "$..a",
            [1, 2, 3, 4],
        ),
        (
            [{"a": 1}, {"b": {"a": 2}}, [{"c": {"d": {"a": 4}}, "a": 3}]],
            "$.2..a",
            [3, 4],
        ),
        (
            [{"a": 1}, [{"b": {"a": 2}}]],
            "$..*",
            [{"a": 1}, [{"b": {"a": 2}}], 1, {"b": {"a": 2}}, {"a": 2}, 2],
        ),
    ),
)
def test_query(d: jsp.Json, p: str, e: jsp.Json) -> None:
    assert jsp.query(d, p) == e


@pytest.mark.parametrize(
    "p",
    (
        # missing starting $
        "",
        "['a']",
        ".1",
        # extra dot at the end
        "$.",
        "$.1.",
        # missing closing bracket
        "$['a'",
        # missing quotes
        "$[a]",
        # extra dot
        "$.['a']",
        # mixed quote types
        "$.[\"a']",
        "$.['a\"]",
        # whitespace
        "$.[ 'a' ]",
    ),
)
def test_parse_errors(p: str) -> None:
    with pytest.raises(jsp.ParseError):
        jsp.parse(p)
